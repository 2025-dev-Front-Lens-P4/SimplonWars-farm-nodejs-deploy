# =====================================================
# GITHUB ACTIONS - PIPELINE DE TESTS AUTOMATIQUES
# =====================================================
#
# üéØ QU'EST-CE QUE CE FICHIER ?
# ------------------------------
# Ce fichier d√©finit un "pipeline CI/CD" (Int√©gration Continue / D√©ploiement Continu).
# C'est comme un robot qui v√©rifie automatiquement que votre code fonctionne
# √† chaque fois que vous faites un changement.
#
# üîÑ COMMENT √áA MARCHE ?
# -----------------------
# 1. Vous poussez du code sur GitHub (git push)
# 2. GitHub Actions d√©tecte le changement
# 3. Le robot lance automatiquement les tests
# 4. Si les tests passent ‚Üí tout va bien !
# 5. Si les tests √©chouent ‚Üí il y a un probl√®me √† corriger
#
# üí° POURQUOI C'EST UTILE ?
# --------------------------
# - D√©tecte les bugs avant qu'ils arrivent en production
# - Garantit que le code fonctionne toujours
# - √âvite les "√ßa marchait sur ma machine"
# - Am√©liore la qualit√© du code

# Nom du pipeline (appara√Æt dans l'interface GitHub)
name: Animal Farm Node.js CI

# üöÄ D√âCLENCHEURS - QUAND LANCER LES TESTS ?
# -------------------------------------------
# On d√©finit quand le pipeline doit se d√©clencher automatiquement
on:
  push:
   branches:
      - main          # Se d√©clenche quand on pousse sur la branche principale
  pull_request:
    branches:
      - main          # Se d√©clenche quand on cr√©e une Pull Request vers main

# üèóÔ∏è JOBS - TRAVAUX √Ä EFFECTUER
# ------------------------------
# Un "job" est un ensemble d'√©tapes qui s'ex√©cutent sur un serveur
jobs:
  # Job principal : construire et tester l'application
  build:
    # üñ•Ô∏è ENVIRONNEMENT D'EX√âCUTION
    # -----------------------------
    # On choisit sur quel type de serveur ex√©cuter nos tests
    # ubuntu-latest = derni√®re version d'Ubuntu (gratuit et fiable)
    runs-on: ubuntu-latest

    # üìã √âTAPES - ACTIONS √Ä EFFECTUER
    # --------------------------------
    # Chaque √©tape est une action sp√©cifique dans notre pipeline
    steps:
    
    # √âTAPE 1 : R√âCUP√âRER LE CODE
    # ----------------------------
    # On t√©l√©charge le code depuis GitHub sur le serveur de test
    - name: Checkout repository
      uses: actions/checkout@v2
      
    # √âTAPE 2 : INSTALLER NODE.JS
    # ----------------------------
    # On installe Node.js sur le serveur de test
    # C'est n√©cessaire pour faire tourner notre application JavaScript
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '18.x'    # Version de Node.js √† utiliser
        
    # √âTAPE 3 : INSTALLER LES D√âPENDANCES
    # ------------------------------------
    # On installe toutes les biblioth√®ques dont notre app a besoin
    # C'est comme faire "npm install" sur votre machine
    - name: Install dependencies
      run: npm install
      
    # √âTAPE 4 : LANCER LES TESTS
    # ---------------------------
    # On ex√©cute tous les tests pour v√©rifier que tout fonctionne
    # Si un test √©choue, le pipeline s'arr√™te et signale une erreur
    - name: Run tests
      run: npm test
