# =====================================================
# GITHUB ACTIONS - D√âPLOIEMENT GITHUB PAGES
# =====================================================
#
# üåê QU'EST-CE QUE CE FICHIER ?
# ------------------------------
# Ce pipeline automatise le d√©ploiement de votre application sur GitHub Pages.
# C'est comme un robot qui :
# 1. Prend votre code
# 2. Cr√©e une version web statique
# 3. La publie sur https://votre-username.github.io/votre-repo
#
# üéØ POURQUOI GITHUB PAGES ?
# ---------------------------
# GitHub Pages permet de :
# - H√©berger gratuitement votre site web
# - Avoir une URL publique accessible √† tous
# - D√©ployer automatiquement √† chaque push
# - Avoir un site professionnel pour votre projet
#
# üîÑ COMMENT √áA MARCHE ?
# -----------------------
# 1. Vous poussez du code sur GitHub
# 2. Le robot cr√©e une version web de votre app
# 3. Le site est publi√© sur GitHub Pages
# 4. Votre app est accessible en ligne !

# Nom du pipeline (appara√Æt dans l'interface GitHub)
name: Deploy to GitHub Pages

# üöÄ D√âCLENCHEURS - QUAND D√âPLOYER ?
# -----------------------------------
# On d√©finit quand le pipeline doit se d√©clencher automatiquement
on:
  push:
    branches:
      - main          # Se d√©clenche seulement sur la branche principale
  workflow_run:
    workflows: ["Tests and Build"]  # Se d√©clenche apr√®s les tests
    types:
      - completed

# üèóÔ∏è JOBS - TRAVAUX √Ä EFFECTUER
# ------------------------------
jobs:
  # Job principal : d√©ployer sur GitHub Pages
  deploy:
    # üñ•Ô∏è ENVIRONNEMENT D'EX√âCUTION
    # -----------------------------
    # On utilise Ubuntu pour le d√©ploiement
    runs-on: ubuntu-latest
    
    # üîê PERMISSIONS N√âCESSAIRES
    # ---------------------------
    # Permissions pour pouvoir pousser sur la branche gh-pages
    permissions:
      contents: write      # Permission d'√©crire dans le repository
      pages: write         # Permission d'√©crire sur GitHub Pages
      id-token: write      # Permission pour l'authentification
    
    # üìã CONDITIONS D'EX√âCUTION
    # --------------------------
    # On ne d√©ploie que si les tests ont r√©ussi
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    # üìã √âTAPES - ACTIONS √Ä EFFECTUER
    # --------------------------------
    steps:
    
    # √âTAPE 1 : R√âCUP√âRER LE CODE
    # ----------------------------
    # On t√©l√©charge le code depuis GitHub
    - name: Checkout
      uses: actions/checkout@v4
      
    # √âTAPE 2 : CONFIGURER NODE.JS
    # -----------------------------
    # On installe Node.js pour pouvoir tester l'application
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'        # Version de Node.js √† utiliser
        cache: 'npm'              # Cache les d√©pendances npm
        
    # √âTAPE 3 : INSTALLER LES D√âPENDANCES
    # ------------------------------------
    # On installe toutes les d√©pendances du projet
    - name: Install dependencies
      run: npm ci                  # Installation propre des d√©pendances
      
    # √âTAPE 4 : LANCER LES TESTS
    # ---------------------------
    # On s'assure que tout fonctionne avant le d√©ploiement
    - name: Run tests
      run: npm test               # Lance tous les tests
      
    # √âTAPE 5 : CR√âER LE SITE STATIQUE
    # ---------------------------------
    # On cr√©e une version web de l'application
    - name: Create static site
      run: |
        # Cr√©er le dossier de d√©ploiement
        mkdir -p docs
        
        # Copier l'animation Star Wars et tous ses assets
        cp -r public/* docs/
        
        # Cr√©er la page pour la route /starwars (m√™me contenu que l'accueil)
        cp docs/index.html docs/starwars.html
        
        # Cr√©er la page de documentation API
        cat > docs/api-docs.html << 'EOF'
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>SimplonWars Farm - Documentation API</title>
            <style>
                body {
                    font-family: 'Arial', sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    min-height: 100vh;
                }
                .container {
                    background: rgba(255, 255, 255, 0.1);
                    padding: 30px;
                    border-radius: 15px;
                    backdrop-filter: blur(10px);
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                }
                h1 {
                    text-align: center;
                    color: #FFD700;
                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
                    margin-bottom: 30px;
                }
                .api-section {
                    background: rgba(255, 255, 255, 0.1);
                    padding: 20px;
                    margin: 20px 0;
                    border-radius: 10px;
                    border-left: 4px solid #FFD700;
                }
                .endpoint {
                    background: rgba(0, 0, 0, 0.3);
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 8px;
                    font-family: 'Courier New', monospace;
                }
                .method {
                    color: #4CAF50;
                    font-weight: bold;
                }
                .url {
                    color: #2196F3;
                }
                .description {
                    margin-top: 10px;
                    font-style: italic;
                }
                .star-wars-intro {
                    text-align: center;
                    margin: 30px 0;
                    padding: 20px;
                    background: rgba(255, 255, 255, 0.1);
                    border-radius: 10px;
                }
                .logo {
                    font-size: 2em;
                    color: #FFD700;
                    margin-bottom: 20px;
                }
                .cta-button {
                    display: inline-block;
                    background: #FFD700;
                    color: #333;
                    padding: 15px 30px;
                    text-decoration: none;
                    border-radius: 25px;
                    font-weight: bold;
                    margin: 10px;
                    transition: transform 0.3s ease;
                }
                .cta-button:hover {
                    transform: scale(1.05);
                }
                .footer {
                    text-align: center;
                    margin-top: 40px;
                    padding-top: 20px;
                    border-top: 1px solid rgba(255, 255, 255, 0.3);
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="star-wars-intro">
                    <div class="logo">üåü</div>
                    <h1>SimplonWars Farm</h1>
                    <p><strong>API Star Wars pour la formation Dev FRONT LENS P4</strong></p>
                    <p>Une API REST qui combine la ferme d'animaux classique avec l'univers Star Wars !</p>
                </div>

                <div class="api-section">
                    <h2>üöÄ API Endpoints</h2>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/api</span>
                        <div class="description">R√©cup√®re tous les animaux Star Wars et leurs sons</div>
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/api/random</span>
                        <div class="description">Retourne un animal Star Wars al√©atoire avec son son et sa plan√®te</div>
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/api/random/{count}</span>
                        <div class="description">Retourne plusieurs animaux al√©atoires (1-10 maximum)</div>
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/api/planet/{planetName}</span>
                        <div class="description">R√©cup√®re tous les animaux d'une plan√®te sp√©cifique</div>
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/api/stats</span>
                        <div class="description">Retourne des statistiques sur les animaux et plan√®tes</div>
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/api/search/{query}</span>
                        <div class="description">Recherche un animal par nom (recherche partielle)</div>
                    </div>
                </div>

                <div class="api-section">
                    <h2>üé¨ Pages Sp√©ciales</h2>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/</span>
                        <div class="description">Page d'accueil avec l'animation Star Wars</div>
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/starwars</span>
                        <div class="description">Animation Star Wars avec l'intro de la formation Dev FRONT LENS P4</div>
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/api-docs</span>
                        <div class="description">Documentation interactive Swagger de l'API</div>
                    </div>
                </div>

                <div style="text-align: center; margin: 30px 0;">
                    <a href="https://github.com/2025-dev-Front-Lens-P4/SimplonWars-farm-nodejs-deploy" class="cta-button">üìÅ Voir le Code</a>
                    <a href="/" class="cta-button">üè† Page d'Accueil</a>
                </div>

                <div class="footer">
                    <p>üåü D√©velopp√© par l'√©quipe <strong>Dev FRONT LENS P4</strong> üåü</p>
                    <p>Formation Simplon - 2025</p>
                    <p>D√©ploy√© automatiquement avec GitHub Actions</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Cr√©er un fichier README pour GitHub Pages
        cat > docs/README.md << 'EOF'
        # SimplonWars Farm - API Star Wars
        
        ## üåü √Ä propos
        
        Cette API combine la ferme d'animaux classique avec l'univers Star Wars pour la formation Dev FRONT LENS P4.
        
        ## üöÄ Fonctionnalit√©s
        
        - API REST compl√®te avec documentation Swagger
        - Animaux Star Wars avec leurs sons et plan√®tes
        - Animation Star Wars interactive
        - Tests automatis√©s
        - D√©ploiement CI/CD avec GitHub Actions
        - Containerisation Docker
        
        ## üìö Documentation
        
        Consultez la [documentation API interactive](/api-docs.html) pour explorer tous les endpoints.
        
        ## üõ†Ô∏è Technologies
        
        - Node.js & Express
        - Swagger pour la documentation
        - Docker pour la containerisation
        - GitHub Actions pour le CI/CD
        - Mocha & Supertest pour les tests
        
        ---
        
        *D√©velopp√© par l'√©quipe Dev FRONT LENS P4 - Formation Simplon 2025*
        EOF
        
        # Cr√©er une page qui utilise les vraies routes de l'API
        cat > docs/api.html << 'EOF'
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>SimplonWars Farm - API Live Demo</title>
            <style>
                body {
                    font-family: 'Arial', sans-serif;
                    max-width: 1000px;
                    margin: 0 auto;
                    padding: 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    min-height: 100vh;
                }
                .container {
                    background: rgba(255, 255, 255, 0.1);
                    padding: 30px;
                    border-radius: 15px;
                    backdrop-filter: blur(10px);
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                }
                h1 {
                    text-align: center;
                    color: #FFD700;
                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
                    margin-bottom: 30px;
                }
                .api-section {
                    background: rgba(0, 0, 0, 0.3);
                    padding: 20px;
                    margin: 20px 0;
                    border-radius: 10px;
                    border-left: 4px solid #FFD700;
                }
                .endpoint-test {
                    background: rgba(255, 255, 255, 0.1);
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 8px;
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .endpoint-name {
                    color: #FFD700;
                    font-weight: bold;
                    font-size: 1.1em;
                    margin-bottom: 10px;
                }
                .test-button {
                    background: #4CAF50;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    cursor: pointer;
                    margin: 5px;
                    font-size: 0.9em;
                }
                .test-button:hover {
                    background: #45a049;
                }
                .result-area {
                    background: rgba(0, 0, 0, 0.5);
                    padding: 10px;
                    margin: 10px 0;
                    border-radius: 4px;
                    font-family: 'Courier New', monospace;
                    font-size: 0.9em;
                    max-height: 200px;
                    overflow-y: auto;
                    white-space: pre-wrap;
                }
                .error {
                    color: #ff6b6b;
                }
                .success {
                    color: #4CAF50;
                }
                .loading {
                    color: #FFD700;
                }
                .cta-button {
                    display: inline-block;
                    background: #FFD700;
                    color: #333;
                    padding: 15px 30px;
                    text-decoration: none;
                    border-radius: 25px;
                    font-weight: bold;
                    margin: 10px;
                    transition: transform 0.3s ease;
                }
                .cta-button:hover {
                    transform: scale(1.05);
                }
                .server-status {
                    text-align: center;
                    padding: 10px;
                    margin: 20px 0;
                    border-radius: 8px;
                    font-weight: bold;
                }
                .server-online {
                    background: rgba(76, 175, 80, 0.3);
                    border: 1px solid #4CAF50;
                }
                .server-offline {
                    background: rgba(255, 107, 107, 0.3);
                    border: 1px solid #ff6b6b;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üåü SimplonWars Farm - API Live Demo</h1>
                
                <div id="server-status" class="server-status server-offline">
                    üî¥ Serveur Node.js hors ligne - Les donn√©es affich√©es sont statiques
                </div>
                
                <div class="api-section">
                    <h2>üöÄ Test des Endpoints API</h2>
                    
                    <div class="endpoint-test">
                        <div class="endpoint-name">GET /api - Tous les animaux</div>
                        <button class="test-button" onclick="testEndpoint('/api')">Tester</button>
                        <div id="result-api" class="result-area">Cliquez sur "Tester" pour voir les r√©sultats...</div>
                    </div>
                    
                    <div class="endpoint-test">
                        <div class="endpoint-name">GET /api/random - Animal al√©atoire</div>
                        <button class="test-button" onclick="testEndpoint('/api/random')">Tester</button>
                        <div id="result-random" class="result-area">Cliquez sur "Tester" pour voir les r√©sultats...</div>
                    </div>
                    
                    <div class="endpoint-test">
                        <div class="endpoint-name">GET /api/random/3 - 3 animaux al√©atoires</div>
                        <button class="test-button" onclick="testEndpoint('/api/random/3')">Tester</button>
                        <div id="result-random-3" class="result-area">Cliquez sur "Tester" pour voir les r√©sultats...</div>
                    </div>
                    
                    <div class="endpoint-test">
                        <div class="endpoint-name">GET /api/planet/Tatooine - Animaux de Tatooine</div>
                        <button class="test-button" onclick="testEndpoint('/api/planet/Tatooine')">Tester</button>
                        <div id="result-planet" class="result-area">Cliquez sur "Tester" pour voir les r√©sultats...</div>
                    </div>
                    
                    <div class="endpoint-test">
                        <div class="endpoint-name">GET /api/stats - Statistiques</div>
                        <button class="test-button" onclick="testEndpoint('/api/stats')">Tester</button>
                        <div id="result-stats" class="result-area">Cliquez sur "Tester" pour voir les r√©sultats...</div>
                    </div>
                    
                    <div class="endpoint-test">
                        <div class="endpoint-name">GET /api/search/ban - Recherche "ban"</div>
                        <button class="test-button" onclick="testEndpoint('/api/search/ban')">Tester</button>
                        <div id="result-search" class="result-area">Cliquez sur "Tester" pour voir les r√©sultats...</div>
                    </div>
                </div>

                <div style="text-align: center; margin: 30px 0;">
                    <a href="/" class="cta-button">üè† Page d'Accueil</a>
                    <a href="/api-docs.html" class="cta-button">üìö Documentation</a>
                    <a href="/starwars.html" class="cta-button">üé¨ Animation Star Wars</a>
                </div>

                <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid rgba(255, 255, 255, 0.3);">
                    <p>üåü D√©velopp√© par l'√©quipe <strong>Dev FRONT LENS P4</strong> üåü</p>
                    <p>Formation Simplon - 2025</p>
                    <p><small>üí° Pour tester avec le vrai serveur, lancez <code>npm start</code> localement</small></p>
                </div>
            </div>

            <script>
                // Configuration de l'API
                const API_BASE_URL = 'http://localhost:8080';
                
                // Fonction pour tester un endpoint
                async function testEndpoint(endpoint) {
                    const resultId = 'result' + endpoint.replace(/\//g, '-').replace(/[^a-zA-Z0-9-]/g, '');
                    const resultElement = document.getElementById(resultId);
                    
                    resultElement.innerHTML = '‚è≥ Chargement...';
                    resultElement.className = 'result-area loading';
                    
                    try {
                        const response = await fetch(API_BASE_URL + endpoint);
                        const data = await response.json();
                        
                        resultElement.innerHTML = JSON.stringify(data, null, 2);
                        resultElement.className = 'result-area success';
                        
                        // Mettre √† jour le statut du serveur
                        updateServerStatus(true);
                    } catch (error) {
                        resultElement.innerHTML = '‚ùå Erreur: ' + error.message + '\n\nüí° Assurez-vous que le serveur Node.js est d√©marr√© avec npm start';
                        resultElement.className = 'result-area error';
                        
                        // Mettre √† jour le statut du serveur
                        updateServerStatus(false);
                    }
                }
                
                // Fonction pour mettre √† jour le statut du serveur
                function updateServerStatus(isOnline) {
                    const statusElement = document.getElementById('server-status');
                    if (isOnline) {
                        statusElement.innerHTML = 'üü¢ Serveur Node.js en ligne - Donn√©es en temps r√©el';
                        statusElement.className = 'server-status server-online';
                    } else {
                        statusElement.innerHTML = 'üî¥ Serveur Node.js hors ligne - Les donn√©es affich√©es sont statiques';
                        statusElement.className = 'server-status server-offline';
                    }
                }
                
                // V√©rifier le statut du serveur au chargement
                window.addEventListener('load', async () => {
                    try {
                        const response = await fetch(API_BASE_URL + '/api');
                        if (response.ok) {
                            updateServerStatus(true);
                        } else {
                            updateServerStatus(false);
                        }
                    } catch (error) {
                        updateServerStatus(false);
                    }
                });
            </script>
        </body>
        </html>
        EOF
        
        # Cr√©er un fichier .htaccess pour g√©rer les routes
        cat > docs/.htaccess << 'EOF'
        RewriteEngine On
        
        # Rediriger /api vers api.html
        RewriteRule ^api/?$ api.html [L]
        
        # Rediriger /starwars vers starwars.html
        RewriteRule ^starwars/?$ starwars.html [L]
        
        # Rediriger /api-docs vers api-docs.html
        RewriteRule ^api-docs/?$ api-docs.html [L]
        
        # Rediriger /api/random vers api.html
        RewriteRule ^api/random/?$ api.html [L]
        
        # Rediriger /api/stats vers api.html
        RewriteRule ^api/stats/?$ api.html [L]
        
        # Rediriger /api/search vers api.html
        RewriteRule ^api/search/?$ api.html [L]
        
        # Rediriger /api/planet vers api.html
        RewriteRule ^api/planet/?$ api.html [L]
        EOF
        
        echo "‚úÖ Site statique cr√©√© avec succ√®s !"
        
    # √âTAPE 6 : D√âPLOYER SUR GITHUB PAGES
    # ------------------------------------
    # On publie le site sur GitHub Pages
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'  # Seulement sur la branche main
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}  # Token automatique GitHub
        publish_dir: ./docs                        # Dossier √† publier
        force_orphan: true                         # Forcer la cr√©ation d'une nouvelle branche
        user_name: 'github-actions[bot]'           # Nom de l'utilisateur pour les commits
        user_email: 'github-actions[bot]@users.noreply.github.com'  # Email pour les commits
        commit_message: 'üöÄ Deploy to GitHub Pages'  # Message de commit
        # Configuration de s√©curit√© pour √©viter les erreurs 403
        enable_jekyll: false                       # D√©sactiver Jekyll (pas n√©cessaire pour un site statique)
        cname: ''                                  # Pas de domaine personnalis√© 