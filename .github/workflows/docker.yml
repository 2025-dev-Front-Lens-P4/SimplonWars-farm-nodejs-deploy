# =====================================================
# GITHUB ACTIONS - PIPELINE DOCKER AUTOMATIQUE
# =====================================================
#
# üê≥ QU'EST-CE QUE CE FICHIER ?
# ------------------------------
# Ce pipeline automatise la cr√©ation et la publication d'images Docker.
# C'est comme un robot qui :
# 1. Prend votre code
# 2. Le transforme en "conteneur" (comme une bo√Æte qui contient votre app)
# 3. Le publie sur des "magasins" en ligne (Docker Hub, GitHub Container Registry)
#
# üéØ POURQUOI DOCKER ?
# ---------------------
# Docker permet de "conteneuriser" votre application :
# - L'app fonctionne partout de la m√™me mani√®re
# - Plus de "√ßa marche sur ma machine"
# - D√©ploiement facile sur n'importe quel serveur
# - Isolation : l'app ne perturbe pas le syst√®me
#
# üîÑ COMMENT √áA MARCHE ?
# -----------------------
# 1. Vous poussez du code sur GitHub
# 2. Le robot construit automatiquement une image Docker
# 3. L'image est publi√©e sur Docker Hub et GitHub Container Registry
# 4. N'importe qui peut maintenant utiliser votre app avec "docker run"

# Nom du pipeline (appara√Æt dans l'interface GitHub)
name: Publish Docker image

# üöÄ D√âCLENCHEURS - QUAND CONSTRUIRE L'IMAGE ?
# ---------------------------------------------
# On d√©finit quand le pipeline doit se d√©clencher automatiquement
on:
  push:
    branches:
      - main          # Se d√©clenche seulement sur la branche principale

# üèóÔ∏è JOBS - TRAVAUX √Ä EFFECTUER
# ------------------------------
jobs:
  # Job principal : construire et publier l'image Docker
  build-and-push:
    # üñ•Ô∏è ENVIRONNEMENT D'EX√âCUTION
    # -----------------------------
    # On utilise Ubuntu pour construire l'image Docker
    runs-on: ubuntu-latest
    
    # üìã √âTAPES - ACTIONS √Ä EFFECTUER
    # --------------------------------
    steps:
    
    # √âTAPE 1 : R√âCUP√âRER LE CODE
    # ----------------------------
    # On t√©l√©charge le code depuis GitHub
    - name: Checkout
      uses: actions/checkout@v2
      
    # √âTAPE 2 : CONFIGURER QEMU
    # --------------------------
    # QEMU permet de construire des images pour diff√©rents types d'ordinateurs
    # (Intel, ARM, etc.) avec une seule image Docker
    # C'est comme cr√©er une version compatible avec tous les t√©l√©phones
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      
    # √âTAPE 3 : CONFIGURER DOCKER BUILDX
    # -----------------------------------
    # Buildx est une version avanc√©e de Docker qui permet :
    # - Construire plus vite
    # - Mieux utiliser le cache
    # - Construire pour plusieurs architectures
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    # √âTAPE 4 : SE CONNECTER √Ä DOCKER HUB (OPTIONNEL)
    # ------------------------------------------------
    # Docker Hub est comme un "magasin" d'images Docker
    # On s'authentifie pour pouvoir publier notre image
    # Les secrets sont stock√©s dans les param√®tres GitHub du projet
    # NOTE: Cette √©tape est optionnelle - supprimez les commentaires si vous avez configur√© les secrets
    # - name: Login to DockerHub
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}    # Nom d'utilisateur Docker Hub
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}       # Mot de passe/token Docker Hub
        
    # √âTAPE 5 : SE CONNECTER √Ä GITHUB CONTAINER REGISTRY (OPTIONNEL)
    # --------------------------------------------------------------
    # GitHub a aussi son propre "magasin" d'images Docker
    # On publie sur les deux pour avoir plus de choix
    # NOTE: Cette √©tape est optionnelle - supprimez les commentaires si vous avez configur√© les secrets
    # - name: Login to GitHub Container Registry
    #   uses: docker/login-action@v1
    #   with:
    #     registry: ghcr.io                              # Adresse du registre GitHub
    #     username: ${{ github.repository_owner }}       # Propri√©taire du repo (automatique)
    #     password: ${{ secrets.GHRC_TOKEN }}            # Token GitHub Container Registry
        
    # √âTAPE 6 : CONSTRUIRE L'IMAGE DOCKER
    # ------------------------------------
    # C'est l'√©tape principale : on construit l'image Docker
    # NOTE: push: false car les connexions aux registres sont d√©sactiv√©es
    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: .                                     # Dossier contenant le code
        file: ./Dockerfile                             # Fichier de recette Docker
        push: false                                    # Ne pas publier (juste construire localement)
        tags: |                                        # √âtiquettes pour identifier l'image
          simplonwars-farm-nodejs:latest              # √âtiquette locale
        # NOTE: Pour publier, d√©commentez les lignes suivantes et configurez les secrets :
        # push: true
        # tags: |
        #   jamtur01/simplonwars-farm-nodejs:latest           # √âtiquette Docker Hub
        #   ghcr.io/jamtur01/simplonwars-farm-nodejs:latest   # √âtiquette GitHub Container Registry
